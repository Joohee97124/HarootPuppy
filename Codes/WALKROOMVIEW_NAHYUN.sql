SELECT USER
FROM DUAL;
--==>> HAROOTPUPPY


CREATE OR REPLACE WALKHISTORYVIEW
AS;
      
                
/*뷰
- 자동확정옵션 범례
- 산책스타일 범례
- 입질여부 범례
- 중성화여부 범례
- 동일성별여부 범례
- 매칭확정
- 산책평가
- 산책참여자
- → 산책평가의 피평가자코드 = 산책참여자 코드가 같을 때, 
산책평가가 0이면 평가 안한거고 1~4이면 평가 한거

*/

----------------------------산책방 정보 조회----------------------------------------
CREATE OR REPLACE VIEW WALKROOMVIEW
AS
SELECT WR.WALKROOM_CODE AS WALKROOM_CODE
, WR.WALKROOM_TITLE AS  WALKROOM_TITLE
, WR.WALKROOM_WORDS AS WALKROOM_WORDS
, WR.WALKROOM_MIN AS WALKROOM_MIN               -- 산책최소인원
, WR.WALKROOM_MAX AS WALKROOM_MAX            -- 산책최대인원
, TO_CHAR(WR.WALKROOM_GENDATE, 'YYYY-MM-DD HH24:MI:SS') AS WALKROOM_GENDATE                -- 산책 방 생성시간
, TO_CHAR(WR.WALKROOM_START, 'YYYY-MM-DD HH24:MI:SS') AS WALKROOM_START       -- 산책시작시간  
, TO_CHAR(WR.WALKROOM_END,  'YYYY-MM-DD HH24:MI:SS') AS WALKROOM_END          -- 산책종료시간
, WR.WALKROOM_PLACE AS WALKROOM_PLACE            -- 산책장소
, WR.WALKROOM_LATITUDE AS WALKROOM_LATITUDE     -- 산책 위도
, WR.WALKROOM_LONGITUDE AS WALKROOM_LONGTITUDE    -- 산책 경도
, P.PARTICIPANTS_CODE AS PARTICIPANTS_CODE
, MEM.MEM_NICKNAME AS MEM_NICKNAME
, REL.SID_CODE AS SID_CODE
, WR.WALKROOM_LEADER AS WALKROOM_LEADER       -- SID.SID_CODE로 방장, 참여자 회원코드를 가져올 경우 둘을 구분할 수 없음.     
, MEM.MEM_ID AS MEM_ID
, PET.PET_CODE AS PET_CODE
, PI.PET_NAME AS PET_NAME
, PI.PET_PHOTO AS PET_PHOTO
, PET.BITE_CODE AS PET_BITE_CODE
, (SELECT B.BITE_CONTENT FROM TBL_BITE_LEG B WHERE B.BITE_CODE = PET.BITE_CODE) AS PET_BITE_CONTENT
, PET.DESEX_CODE AS PET_DESEX_CODE
, (SELECT D.DESEX_CONTENT FROM TBL_DESEX_LEG D WHERE D.DESEX_CODE = PET.DESEX_CODE) AS PET_DESEX_CONTENT
, (SELECT PC.PET_CHAR1_CODE FROM TBL_PET_CHAR1 PC WHERE PET_CHAR1_CODE = PET.PET_CHAR1_CODE) AS PET_CHAR1_CODE
, (SELECT PC.PET_CHAR1_CONTENT FROM TBL_PET_CHAR1 PC WHERE PET_CHAR1_CODE = PET.PET_CHAR1_CODE) AS PET_CHAR1_CONTENT
, (SELECT PC2.PET_CHAR2_CODE FROM TBL_PET_CHAR2 PC2 WHERE PET_CHAR2_CODE = PET.PET_CHAR2_CODE) AS PET_CHAR2_CODE
, (SELECT PC2.PET_CHAR2_CONTENT FROM TBL_PET_CHAR2 PC2 WHERE PET_CHAR2_CODE = PET.PET_CHAR2_CODE) AS PET_CHAR2_CONTENT
, (SELECT PC3.PET_CHAR3_CODE FROM TBL_PET_CHAR3 PC3 WHERE PET_CHAR3_CODE = PET.PET_CHAR3_CODE) AS PET_CHAR3_CODE
, (SELECT PC3.PET_CHAR3_CONTENT FROM TBL_PET_CHAR3 PC3 WHERE PET_CHAR3_CODE = PET.PET_CHAR3_CODE) AS PET_CHAR3_CONTENT
, (SELECT PC4.PET_CHAR4_CODE FROM TBL_PET_CHAR4 PC4 WHERE PET_CHAR4_CODE = PET.PET_CHAR4_CODE) AS PET_CHAR4_CODE
, (SELECT PC4.PET_CHAR4_CONTENT FROM TBL_PET_CHAR4 PC4 WHERE PET_CHAR4_CODE = PET.PET_CHAR4_CODE) AS PET_CHAR4_CONTENT
, REL.RELATION_CODE AS RELATION_CODE
, CASE WHEN M.MATCH_CODE IS NULL THEN '매칭이전'
       WHEN M.MATCH_CODE IS NOT NULL THEN '매칭완료'
       ELSE '알 수 없음' END AS MATCH_STATE  
, CASE WHEN WR.WALKROOM_END > SYSDATE THEN '산책예정'
       WHEN WR.WALKROOM_END <= SYSDATE THEN '산책완료'
       ELSE '알 수 없음' END AS WALK_STATE
, M.MATCH_CODE AS MATCH_CODE
, TO_CHAR(M.MATCH_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MATCH_DATE 
, A.AUTO_CODE AUTO_CODE
, A.AUTO_CONTENT AS AUTO_CONTENT
, ST.STYLE_CODE AS STYLE_CODE
, ST.STYLE_CONTENT AS STYLE_CONTENT
, B.BITE_CODE AS BITE_CODE
, B.BITE_CONTENT AS BITE_CONTENT
, D.DESEX_CODE AS DESEX_CODE
, D.DESEX_CONTENT AS DESEX_CONTENT
, SS.SAMESEX_CODE AS SAMESEX_CODE
, SS.SAMESEX_CONTENT AS SAMESEX_CONTENT
FROM TBL_WALKROOM WR
LEFT JOIN TBL_PARTICIPANTS P   
ON WR.WALKROOM_CODE = P.WALKROOM_CODE
    LEFT JOIN TBL_RELATION REL
    ON P.RELATION_CODE = REL.RELATION_CODE  -- RELATION 테이블(참여자 회원코드, 반려견 정보)
        LEFT JOIN TBL_SID SID
        ON SID.SID_CODE = REL.SID_CODE      -- 참여자 안에 방장이 포함되어 있으므로 방장코드와 SID코드를 따로 연결할 필요 없음.
            LEFT JOIN TBL_MEMBER MEM
            ON MEM.MEM_CODE = SID.MEM_CODE
                 LEFT JOIN TBL_AUTO_LEG A   -- 자동 옵션
                 ON WR.AUTO_CODE = A.AUTO_CODE
                    LEFT JOIN TBL_STYLE_LEG ST  -- 산책 스타일
                    ON WR.STYLE_CODE = ST.STYLE_CODE    
                        LEFT JOIN TBL_BITE_LEG B    -- 입질 여부
                        ON WR.BITE_CODE = B.BITE_CODE
                            LEFT JOIN TBL_DESEX_LEG D   -- 중성화
                            ON WR.DESEX_CODE = D.DESEX_CODE
                                LEFT JOIN TBL_SAMESEX_LEG SS    -- 동일 성별
                                ON WR.SAMESEX_CODE = SS.SAMESEX_CODE
                                    LEFT JOIN TBL_MATCH M
                                    ON WR.WALKROOM_CODE = M.WALKROOM_CODE
                                            LEFT JOIN TBL_PET PET
                                            ON REL.PET_CODE = PET.PET_CODE
                                                LEFT JOIN TBL_PET_INFO PI
                                                ON PET.PET_CODE = PI.PET_CODE                                          
ORDER BY WR.WALKROOM_CODE;   
        
        
SELECT *
FROM WALKROOMVIEW;        
        
SELECT *
FROM WALKROOMVIEW
WHERE WALKROOM_LEADER = 'SID001' AND MEM_NICKNAME = '사공혜연';


SELECT *
FROM TBL_WALKROOM;



-------------히스토리에서 사용자가 평가를 했는지 안했는지 조회하기 위해 필요한 뷰

CREATE OR REPLACE VIEW EVALSTATEVIEW
AS
SELECT WR.WALKROOM_CODE AS WALKROOM_CODE
, P.PARTICIPANTS_CODE AS PARTICIPANTS_CODE
, MEM.MEM_NICKNAME AS MEM_NICKNAME
, REL.SID_CODE AS SID_CODE
, WR.WALKROOM_LEADER AS WALKROOM_LEADER          
, MEM.MEM_ID AS MEM_ID
, M.MATCH_CODE AS MATCH_CODE
, E.EVAL_WRITER AS EVAL_WRITER
, E.EVAL_TARGET AS EVAL_TARGET
FROM TBL_WALKROOM WR
LEFT JOIN TBL_PARTICIPANTS P   
ON WR.WALKROOM_CODE = P.WALKROOM_CODE
    LEFT JOIN TBL_RELATION REL
    ON P.RELATION_CODE = REL.RELATION_CODE
        LEFT JOIN TBL_SID SID   
        ON SID.SID_CODE = REL.SID_CODE
            LEFT JOIN TBL_MEMBER MEM
            ON MEM.MEM_CODE = SID.MEM_CODE
                LEFT JOIN TBL_MATCH M
                ON WR.WALKROOM_CODE = M.WALKROOM_CODE
                    LEFT JOIN TBL_EVALUATION E
                    ON M.MATCH_CODE = E.MATCH_CODE AND E.EVAL_WRITER=P.PARTICIPANTS_CODE;


-- 접속자가 이 해당 방 평가했는지 여부 체크하는 구문
-- 0 개면 평가를 안한 것, 1개 이상이면 평가를 한 
SELECT COUNT(*)
FROM EVALSTATEVIEW
WHERE EVAL_WRITER = 'PAR001' AND WALKROOM_CODE = 1;


SELECT *
FROM EVALSTATEVIEW
ORDER BY WALKROOM_CODE;

---------------------------------산책점수 계산--------------------------------------



-- 산책 점수 조회 
CREATE OR REPLACE VIEW WALKSCOREVIEW
AS
SELECT EV.SID_CODE AS SID_CODE, EV.EVAL_AVG AS EVAL_AVG
, REW.REWARD AS REWARDS, (EV.EVAL_AVG+REW.REWARD) AS WALK_SCORE
FROM 
(
    SELECT ET.SID_CODE AS SID_CODE, SUM(ET.SSUM)/ REPLACE(COUNT(ET.EVAL_TARGET), 0, 1) AS EVAL_AVG, COUNT(ET.SID_CODE)
    FROM
    (
        SELECT SI.SID_CODE AS SID_CODE, E.EVAL_TARGET AS EVAL_TARGET
             , SUM((NVL(E.EVAL_SCORE1, 0) + NVL(E.EVAL_SCORE2, 0) + NVL(E.EVAL_SCORE3, 0) + NVL(E.EVAL_SCORE4, 0))/4) / REPLACE(COUNT(E.EVAL_CODE), 0, 1) AS SSUM
             --,  REPLACE(COUNT(E.EVAL_CODE), 0, 1)
        FROM TBL_SID SI, TBL_WALK_SCORE S, TBL_EVALUATION E
        WHERE SI.SID_CODE = S.SID_CODE(+)
          AND S.EVAL_CODE = E.EVAL_CODE(+)
        GROUP BY SI.SID_CODE, E.EVAL_TARGET
        ORDER BY SI.SID_CODE
    ) ET
    GROUP BY ET.SID_CODE
) EV,
(
    SELECT SI.SID_CODE
         , SUM(NVL(R.REWARD_SCORE, 0)) AS REWARD
    FROM TBL_SID SI 
     LEFT JOIN TBL_WALK_SCORE S
        ON SI.SID_CODE = S.SID_CODE
        LEFT JOIN TBL_REWARD R
            ON R.REWARD_CODE = S.REWARD_CODE
    GROUP BY SI.SID_CODE
) REW
WHERE EV.SID_CODE = REW.SID_CODE
ORDER BY EV.SID_CODE;



SELECT *
FROM WALKSCOREVIEW;




-- 테이블 조회

SELECT *
FROM TBL_SID;

SELECT *
FROM TBL_RELATION;

SELECT *
FROM TBL_WALKROOM;

SELECT *
FROM TBL_RELATION;

SELECT *
FROM TBL_PARTICIPANTS;

SELECT *
FROM TBL_MEMBER;

SELECT *
FROM TBL_EVALUATION;

SELECT *
FROM TBL_WALK_SCORE
ORDER BY SID_CODE;

SELECT *
FROM TBL_REWARD;


COMMIT;


-- 하림 수정(산책방 내에서 보여주는 정보 전체 조회용)
CREATE OR REPLACE VIEW WALKROOMVIEW
AS
SELECT WR.WALKROOM_CODE AS WALKROOM_CODE
, WR.WALKROOM_TITLE AS WALKROOM_TITLE
, WR.WALKROOM_WORDS AS WALKROOM_WORDS
, WR.WALKROOM_MIN AS WALKROOM_MIN               -- 산책최소인원
, WR.WALKROOM_MAX AS WALKROOM_MAX               -- 산책최대인원
, TO_CHAR(WR.WALKROOM_GENDATE, 'YYYY-MM-DD HH24:MI:SS') AS WALKROOM_GENDATE                -- 산책 방 생성시간
, TO_CHAR(WR.WALKROOM_START, 'YYYY-MM-DD HH24:MI:SS') AS WALKROOM_START       -- 산책시작시간  
, TO_CHAR(WR.WALKROOM_END,  'YYYY-MM-DD HH24:MI:SS') AS WALKROOM_END          -- 산책종료시간
, WR.WALKROOM_PLACE AS WALKROOM_PLACE            -- 산책장소
, WR.WALKROOM_LATITUDE AS WALKROOM_LATITUDE     -- 산책 위도
, WR.WALKROOM_LONGITUDE AS WALKROOM_LONGTITUDE    -- 산책 경도
, A.AUTO_CODE AUTO_CODE
, A.AUTO_CONTENT AS AUTO_CONTENT
, ST.STYLE_CODE AS STYLE_CODE
, ST.STYLE_CONTENT AS STYLE_CONTENT
, B.BITE_CODE AS BITE_CODE
, B.BITE_CONTENT AS BITE_CONTENT
, D.DESEX_CODE AS DESEX_CODE
, D.DESEX_CONTENT AS DESEX_CONTENT
, SS.SAMESEX_CODE AS SAMESEX_CODE
, SS.SAMESEX_CONTENT AS SAMESEX_CONTENT
, P.PARTICIPANTS_CODE AS PARTICIPANTS_CODE
, MEM.MEM_NICKNAME AS MEM_NICKNAME
, MEM.MEM_GENDER AS MEM_GENDER
, REL.SID_CODE AS SID_CODE
, WR.WALKROOM_LEADER AS WALKROOM_LEADER       -- SID.SID_CODE로 방장, 참여자 회원코드를 가져올 경우 둘을 구분할 수 없음.     
, MEM.MEM_ID AS MEM_ID
, PET.PET_CODE AS PET_CODE
, TO_CHAR(PET.PET_BIRTH, 'YYYY-MM-DD') PET_BIRTH
, CASE WHEN TRUNC(SYSDATE) - PET.PET_BIRTH <= 30 THEN
            TRUNC(SYSDATE) - PET.PET_BIRTH + 1 || '일'
       WHEN MONTHS_BETWEEN(TRUNC(SYSDATE), PET.PET_BIRTH) < 12 THEN
            TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), PET.PET_BIRTH)) || '개월'
       ELSE
            TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), PET.PET_BIRTH) / 12 ) || '세'
  END PET_AGE
, PET.PET_SEX AS PET_SEX
, PI.PET_NAME AS PET_NAME
, PI.PET_PHOTO AS PET_PHOTO
, PTY.PET_TYPE_CODE AS PET_TYPE_CODE
, PTY.PET_TYPE_NAME AS PET_TYPE_NAME
, PET.BITE_CODE AS PET_BITE_CODE
, (SELECT B.BITE_CONTENT FROM TBL_BITE_LEG B WHERE B.BITE_CODE = PET.BITE_CODE) AS PET_BITE_CONTENT
, PET.DESEX_CODE AS PET_DESEX_CODE
, (SELECT D.DESEX_CONTENT FROM TBL_DESEX_LEG D WHERE D.DESEX_CODE = PET.DESEX_CODE) AS PET_DESEX_CONTENT
, (SELECT PC.PET_CHAR1_CODE FROM TBL_PET_CHAR1 PC WHERE PET_CHAR1_CODE = PET.PET_CHAR1_CODE) AS PET_CHAR1_CODE
, (SELECT PC.PET_CHAR1_CONTENT FROM TBL_PET_CHAR1 PC WHERE PET_CHAR1_CODE = PET.PET_CHAR1_CODE) AS PET_CHAR1_CONTENT
, (SELECT PC2.PET_CHAR2_CODE FROM TBL_PET_CHAR2 PC2 WHERE PET_CHAR2_CODE = PET.PET_CHAR2_CODE) AS PET_CHAR2_CODE
, (SELECT PC2.PET_CHAR2_CONTENT FROM TBL_PET_CHAR2 PC2 WHERE PET_CHAR2_CODE = PET.PET_CHAR2_CODE) AS PET_CHAR2_CONTENT
, (SELECT PC3.PET_CHAR3_CODE FROM TBL_PET_CHAR3 PC3 WHERE PET_CHAR3_CODE = PET.PET_CHAR3_CODE) AS PET_CHAR3_CODE
, (SELECT PC3.PET_CHAR3_CONTENT FROM TBL_PET_CHAR3 PC3 WHERE PET_CHAR3_CODE = PET.PET_CHAR3_CODE) AS PET_CHAR3_CONTENT
, (SELECT PC4.PET_CHAR4_CODE FROM TBL_PET_CHAR4 PC4 WHERE PET_CHAR4_CODE = PET.PET_CHAR4_CODE) AS PET_CHAR4_CODE
, (SELECT PC4.PET_CHAR4_CONTENT FROM TBL_PET_CHAR4 PC4 WHERE PET_CHAR4_CODE = PET.PET_CHAR4_CODE) AS PET_CHAR4_CONTENT
, REL.RELATION_CODE AS RELATION_CODE
, CASE WHEN M.MATCH_CODE IS NULL THEN '매칭이전'
       WHEN M.MATCH_CODE IS NOT NULL THEN '매칭완료'
       ELSE '알 수 없음' END AS MATCH_STATE
, CASE WHEN WR.WALKROOM_END > SYSDATE THEN '산책예정'
       WHEN WR.WALKROOM_END <= SYSDATE THEN '산책완료'
       ELSE '알 수 없음' END AS WALK_STATE
, M.MATCH_CODE AS MATCH_CODE
, TO_CHAR(M.MATCH_DATE, 'YYYY-MM-DD HH24:MI:SS') AS MATCH_DATE 
FROM TBL_WALKROOM WR
LEFT JOIN TBL_PARTICIPANTS P
ON WR.WALKROOM_CODE = P.WALKROOM_CODE
    LEFT JOIN TBL_RELATION REL
    ON P.RELATION_CODE = REL.RELATION_CODE  -- RELATION 테이블(참여자 회원코드, 반려견 정보)
        LEFT JOIN TBL_SID SID
        ON SID.SID_CODE = REL.SID_CODE      -- 참여자 안에 방장이 포함되어 있으므로 방장코드와 SID코드를 따로 연결할 필요 없음.
            LEFT JOIN TBL_MEMBER MEM
            ON MEM.MEM_CODE = SID.MEM_CODE
                 LEFT JOIN TBL_AUTO_LEG A   -- 자동 옵션
                 ON WR.AUTO_CODE = A.AUTO_CODE
                    LEFT JOIN TBL_STYLE_LEG ST  -- 산책 스타일
                    ON WR.STYLE_CODE = ST.STYLE_CODE    
                        LEFT JOIN TBL_BITE_LEG B    -- 입질 여부
                        ON WR.BITE_CODE = B.BITE_CODE
                            LEFT JOIN TBL_DESEX_LEG D   -- 중성화
                            ON WR.DESEX_CODE = D.DESEX_CODE
                                LEFT JOIN TBL_SAMESEX_LEG SS    -- 동일 성별
                                ON WR.SAMESEX_CODE = SS.SAMESEX_CODE
                                    LEFT JOIN TBL_MATCH M
                                    ON WR.WALKROOM_CODE = M.WALKROOM_CODE 
                                        LEFT JOIN TBL_PET PET
                                        ON REL.PET_CODE = PET.PET_CODE
                                            LEFT JOIN TBL_PET_INFO PI
                                            ON PET.PET_CODE = PI.PET_CODE 
                                                LEFT JOIN TBL_PET_TYPE PTY
                                                ON PET.PET_TYPE_CODE = PTY.PET_TYPE_CODE                                               
ORDER BY WR.WALKROOM_CODE;

SELECT *
FROM WALKROOMVIEW;
WHERE WALKROOM_CODE = 4;

SELECT *
FROM TBL_PET;

-- 반려견 나이 계산 쿼리
SELECT PET_CODE, PET_BIRTH
     , TO_CHAR(PET_BIRTH, 'YYYY-MM-DD') BIRTHDAY
     , CASE WHEN TRUNC(SYSDATE) - PET_BIRTH <= 30 THEN
                 TRUNC(SYSDATE) - PET_BIRTH + 1 || '일'
            WHEN MONTHS_BETWEEN(TRUNC(SYSDATE), PET_BIRTH) < 12 THEN
                 TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), PET_BIRTH)) || '개월'
            ELSE
                 TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), PET_BIRTH) / 12 ) || '세'
       END AGE
FROM TBL_PET;

SELECT *
FROM TBL_PET_TYPE;

SELECT AUTO_CONTENT
FROM TBL_AUTO_LEG
WHERE AUTO_CODE = 1;

UPDATE TBL_AUTO_LEG
SET AUTO_CONTENT='자동확정 옵션 OFF'
WHERE AUTO_CODE=0;
--==>> 1 행 이(가) 업데이트되었습니다. 

COMMIT;

SELECT *
FROM TBL_PARTICIPANTS;

/*
WALKROOM_CODE, WALKROOM_TITLE, WALKROOM_WORDS, WALKROOM_MIN, WALKROOM_MAX
, WALKROOM_GENDATE, WALKROOM_START, WALKROOM_END, WALKROOM_PLACE, WALKROOM_LATITUDE, WALKROOM_LONGTITUDE
, AUTO_CODE, AUTO_CONTENT, STYLE_CODE, STYLE_CONTENT
, BITE_CODE, BITE_CONTENT, DESEX_CODE, DESEX_CONTENT, SAMESEX_CODE, SAMESEX_CONTENT
, PARTICIPANTS_CODE, MEM_NICKNAME, MEM_GENDER, SID_CODE, WALKROOM_LEADER, MEM_ID
, PET_CODE, PET_BIRTH, PET_AGE, PET_SEX, PET_NAME, PET_PHOTO, PET_TYPE_CODE, PET_TYPE_NAME
, PET_BITE_CODE, PET_BITE_CONTENT, PET_DESEX_CODE, PET_DESEX_CONTENT
, PET_CHAR1_CODE, PET_CHAR1_CONTENT, PET_CHAR2_CODE, PET_CHAR2_CONTENT
, PET_CHAR3_CODE, PET_CHAR3_CONTENT, PET_CHAR4_CODE, PET_CHAR4_CONTENT
, RELATION_CODE, MATCH_STATE, WALK_STATE, MATCH_CODE, MATCH_DATE
*/



SELECT ADMIN_CODE, ADMIN_ID, ADMIN_PW, ADMIN_NAME, ADMIN_REGDATE
		FROM TBL_ADMIN
		WHERE ADMIN_ID='admin1'
		AND ADMIN_PW=CRYPTPACK.ENCRYPT('0308', 'admin1');


SELECT *
FROM TAB;

SELECT *
FROM TBL_DISEASE;

SELECT *
FROM TBL_DESEASE;


SELECT *
FROM TBL_PET_INFO;

SELECT *
FROM TBL_PET;



SELECT *
FROM TBL_MEMBER
ORDER BY MEM_CODE;

SELECT *
FROM TBL_WALK_AGREE;

DELETE
FROM TBL_WALK_AGREE
WHERE SID_CODE='SID14';

SELECT *
FROM TBL_SID;

DELETE
FROM TBL_SID
WHERE SID_CODE='SID13';


COMMIT;

-- 반려견 테이블에 자주산책하는 장소 경도, 위도 추가

DESC TBL_PET;

SELECT *
FROM TBL_PET_INFO;

ALTER TABLE TBL_PET_INFO ADD PET_ADDR_LAT VARCHAR2(20);
--==>> Table TBL_PET_INFO이(가) 변경되었습니다.

ALTER TABLE TBL_PET_INFO ADD PET_ADDR_LNG VARCHAR2(20);
--==>> Table TBL_PET_INFO이(가) 변경되었습니다.


-- 반려견 주소 산책 장소 경도, 위도 데이터 추가
UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='35.122618', PET_ADDR_LNG='129.020139'
WHERE PET_CODE='PET001';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='35.110121', PET_ADDR_LNG='129.023357'
WHERE PET_CODE='PET002';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='37.476285', PET_ADDR_LNG='126.871070'
WHERE PET_CODE='PET003';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='37.395962', PET_ADDR_LNG='126.940223'
, PET_ADDR='경기도 안양시 비산2동'
WHERE PET_CODE='PET004';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='37.456449', PET_ADDR_LNG='126.867765'
WHERE PET_CODE='PET005';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='37.481787', PET_ADDR_LNG='126.759310'
WHERE PET_CODE='PET006';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='36.354114', PET_ADDR_LNG='127.388184'
WHERE PET_CODE='PET007';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='36.108354', PET_ADDR_LNG='129.409156'
WHERE PET_CODE='PET008';

UPDATE TBL_PET_INFO
SET PET_ADDR_LAT='37.476285', PET_ADDR_LNG='126.871070'
WHERE PET_CODE='PET009';

—==>> 1 행 이(가) 업데이트되었습니다. * 9

— NOT NULL 제약사항 추가( NOT NULL 제약조건은 컬럼 추가와 동시에 할 수 없음 )
ALTER TABLE TBL_PET_INFO MODIFY PET_ADDR_LAT NOT NULL;
ALTER TABLE TBL_PET_INFO MODIFY PET_ADDR_LNG NOT NULL;
—==>> Table TBL_PET_INFO이(가) 변경되었습니다.

DESC TBL_PET_INFO;


SELECT *
FROM TBL_MEMBER;